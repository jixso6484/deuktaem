use crate::config::SupabaseConfig;
use crate::repository::RepositoryFactory;
use crate::domain::entities::product::Product;
use crate::domain::dto::pagenation::{Pagenation, PagenationResult};

#[derive(Clone)]
pub struct ProductService {
    factory: RepositoryFactory,
}

impl ProductService {
    pub fn new(config: SupabaseConfig) -> Self {
        Self {
            factory: RepositoryFactory::new(config),
        }
    }

    // Í∏∞Î≥∏ Í∏∞Îä•Îßå ÎÇ®ÍπÄ - RepositoryÏóê Ïã§Ï†úÎ°ú Ï°¥Ïû¨ÌïòÎäî Î©îÏÑúÎìúÎßå ÏÇ¨Ïö©
    pub async fn get_product_by_id(&self, product_id: i64) -> Result<Option<Product>, Box<dyn std::error::Error>> {
        log::info!("üì¶ Getting product by ID: {}", product_id);
        let repo = self.factory.public_product_repo();
        repo.find_by_id(product_id).await
    }

    // ÎÇòÎùºÎ≥Ñ ÏÉÅÌíà Î™©Î°ù Ï°∞Ìöå 
    pub async fn get_products_by_country(&self, country: &str, pagination: Pagenation) -> Result<PagenationResult<Product>, Box<dyn std::error::Error>> {
        log::info!("üåç Getting products for country: {}", country);
        let repo = self.factory.public_product_repo();
        repo.find_by_country(country, pagination).await
    }

    // Ï†ÑÏ≤¥ ÏÉÅÌíà Î™©Î°ù Ï°∞Ìöå (ÎÇòÎùºÎ≥Ñ ÌïÑÌÑ∞ÎßÅ ÏóÜÏùå)
    pub async fn get_all_products(&self, pagination: Pagenation) -> Result<PagenationResult<Product>, Box<dyn std::error::Error>> {
        log::info!("üì¶ Getting all products");
        let repo = self.factory.public_product_repo();
        repo.find_all_paginated(pagination).await
    }

    // Ïù∏Í∏∞ ÏÉÅÌíà Ï°∞Ìöå (ÌÅ¥Î¶≠ Ïàò Í∏∞Ï§Ä)
    pub async fn get_popular_products(&self, pagination: Pagenation) -> Result<PagenationResult<Product>, Box<dyn std::error::Error>> {
        log::info!("üî• Getting popular products");
        let repo = self.factory.public_product_repo();
        repo.find_popular_products(pagination).await
    }

    // ÏÉÅÌíà ÌÅ¥Î¶≠ Í∏∞Î°ù - ÌÅ¥Î¶≠ Ïàò Ï¶ùÍ∞Ä
    pub async fn record_product_click(&self, product_id: i64) -> Result<(), Box<dyn std::error::Error>> {
        log::info!("üñ±Ô∏è Recording product click: {}", product_id);
        let repo = self.factory.public_product_repo();
        repo.increment_click_count(product_id).await
    }
}